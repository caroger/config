let skip_defaults_vim=1
set nocompatible

"####################### Vi Compatible (~/.exrc) #######################
" automatically indent new lines
set autoindent
" automatically write files when changing when multiple files open
set autowrite
" activate line numbers
set number
" turn col and row position on in bottom right
set ruler
" show command and insert mode
set showmode
set tabstop=2
"#######################################################################
set softtabstop=2
set shiftwidth=2
set smartindent
set smarttab
" stop vim from silently fucking with files that it shouldn't
set nofixendofline
" replace tabs with spaces automatically
set expandtab
" enough for line numbers + gutter within 80 standard
set textwidth=72
highlight NonText guifg=bg
" more risky, but cleaner
set nobackup
set noswapfile
set nowritebackup
set icon
" center the cursor always on the screen
set scrolloff=999
" highlight search hits,  \+<cr> to clear
set hlsearch
set incsearch
set linebreak
map <silent> <leader><cr> :noh<cr>:redraw!<cr>
" avoid most of the 'Hit Enter ...' messages
set shortmess=aoOtIF
" prevents truncated yanks, deletes, etc.
set viminfo='20,<1000,s1000

" Just the defaults, these are changed per filetype by plugins.
" Most of the utility of all of this has been superceded by the use of
" modern simplified pandoc for capturing knowledge source instead of
" arbitrary raw text files.
set formatoptions-=t   " don't auto-wrap text using text width
set formatoptions+=c   " autowrap comments using textwidth with leader
set formatoptions-=r   " don't auto-insert comment leader on enter in insert
set formatoptions-=o   " don't auto-insert comment leader on o/O in normal
set formatoptions+=q   " allow formatting of comments with gq
set formatoptions-=w   " don't use trailing whitespace for paragraphs
set formatoptions-=a   " disable auto-formatting of paragraph changes
set formatoptions-=n   " don't recognized numbered lists
set formatoptions+=j   " delete comment prefix when joining
set formatoptions-=2   " don't use the indent of second paragraph line
set formatoptions-=v   " don't use broken 'vi-compatible auto-wrapping'
set formatoptions-=b   " don't use broken 'vi-compatible auto-wrapping'
set formatoptions+=l   " long lines not broken in insert mode
set formatoptions+=m   " multi-byte character line break support
set formatoptions+=M   " don't add space before or after multi-byte char
set formatoptions-=B   " don't add space between two multi-byte chars in join
set formatoptions+=1   " don't break a line after a one-letter word

" stop complaints about switching buffer with changes
set hidden
" command history
set history=100
" here because plugins and stuff need it
syntax enable
" faster scrolling
set ttyfast
" allow sensing the filetype
filetype plugin on
" paste in system clipper board
set clipboard=unnamedplus
" Install vim-plug if not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif
" high contrast for streaming, etc.
set background=dark
" only load plugins if Plug detected
if filereadable(expand("~/.vim/autoload/plug.vim"))

  " load all the plugins
  call plug#begin('~/.vimplugins')
    Plug 'sheerun/vim-polyglot'
    Plug 'WolfgangMehner/bash-support' " borkish
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-endwise'

    Plug 'jiangmiao/auto-pairs'
    Plug 'vim-ruby/vim-ruby'
    Plug 'tpope/vim-rails'
    Plug 'dewyze/vim-ruby-block-helpers'
    Plug 'thoughtbot/vim-rspec'

    Plug 'vim-scripts/AutoComplPop'
    Plug 'ervandew/supertab'
    Plug 'dense-analysis/ale'
    Plug 'luochen1990/rainbow'

    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'preservim/nerdtree'
    Plug 'kien/ctrlp.vim'
    Plug 'chrisbra/Colorizer'

    Plug 'itchyny/lightline.vim'
    Plug 'mengelbrecht/lightline-bufferline'
    Plug 'cespare/vim-toml'
    Plug 'pangloss/vim-javascript'
    Plug 'airblade/vim-gitgutter'
    Plug 'morhetz/gruvbox'
    Plug 'nielsmadan/harlequin'
    Plug 'tomasr/molokai'

  call plug#end()
  colorscheme gruvbox
  let g:gruvbox_transparent_bg=1
  hi Normal ctermbg=NONE " for transparent background
  hi SpellBad ctermbg=red " for transparent background
  hi SpellRare ctermbg=red
  hi Special ctermfg=cyan
  hi clear SignColumn
else
  autocmd vimleavepre *.go !gofmt -w % " backup if fatih fails
endif

"== lightline
let g:lightline = {
      \ 'colorscheme': 'PaperColor light',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'tabline': {
      \   'left': [ ['buffers'] ],
      \   'right': [ ['close'] ]
      \ },
      \ 'component_expand': {
      \   'buffers': 'lightline#bufferline#buffers'
      \ },
      \ 'component_type': {
      \   'buffers': 'tabsel'
      \ }
      \ }
" better command-line completion
set wildmenu
" Automatically deletes all trailing whitespace and newlines at end of file on save.
autocmd BufWritePre * %s/\s\+$//e
autocmd BufWritepre * %s/\n\+\%$//e
" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" enable omni-completion
set omnifunc=syntaxcomplete#Complete
" force some file names to be specific file type
au bufnewfile,bufRead *.bash* set ft=sh
au bufnewfile,bufRead *.pegn set ft=config
au bufnewfile,bufRead *.profile set filetype=sh
au bufnewfile,bufRead *.crontab set filetype=crontab
au bufnewfile,bufRead *ssh/config set filetype=sshconfig
au bufnewfile,bufRead *gitconfig set filetype=gitconfig
au bufnewfile,bufRead /tmp/psql.edit.* set syntax=sql
" -----------------------------------------------------------------------------
" Plugin Settings
" -----------------------------------------------------------------------------
" Display hex color code
let g:colorizer_auto_filetype='css,json,yml'

"== colorful brackets
let g:rainbow_active = 1


"== Auto completion
let g:SuperTabDefaultCompletionType = "<c-n>"
"== CtrlP Setting
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_user_command = 'find %s -type f'
"== ALE
let g:ale_fixers = {
\  'ruby':['rubocop'],
\}
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
" You can disable this option too
" if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0
" -----------------------------------------------------------------------------
" Custom Keybindings
" -----------------------------------------------------------------------------
" Nerd Tree Toggle
map <F2> :NERDTreeToggle<CR>
" Shortcutting split navigation, saving a keypress:
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
"== switching buffers
map <leader>n :bn<cr>
map <leader>p :bp<cr>
map <leader>d :bd<cr>
"== edit vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
nnoremap <leader>af :ALEFix<CR>
nnoremap <leader>at :ALEToggle<CR>
" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
